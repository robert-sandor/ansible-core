version: "3.8"

services:

  {{ traefik_name }}:
    container_name: {{ traefik_name }}
    hostname: {{ traefik_name }}
    image: traefik:{{ traefik_version }}
    command:
      - "--api=true"
      - "--accesslog={{ traefik_enable_access_logs | ternary('true', 'false') }}"
      - "--providers.docker=true"
      - "--providers.docker.network={{ network_name }}"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.{{ acme_provider }}.acme.dnschallenge=true"
      - "--certificatesresolvers.{{ acme_provider }}.acme.dnschallenge.provider={{ acme_provider }}"
      - "--certificatesresolvers.{{ acme_provider }}.acme.email={{ acme_email }}"
      - "--certificatesresolvers.{{ acme_provider }}.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.{{ acme_provider }}.acme.caserver=https://acme{% if acme_testing_mode %}-staging{% endif %}-v02.api.letsencrypt.org/directory"
      - "--metrics.prometheus={{ traefik_enable_metrics | ternary('true', 'false') }}"
      - "--entryPoints.metrics.address=:{{ traefik_metrics_port }}"
      - "--metrics.prometheus.entryPoint=metrics"
    environment:
      - PUID={{ ansible_facts.user_uid }}
      - PGID={{ ansible_facts.user_gid }}
      - TZ={{ timezone }}
{% for e in acme_env %}
      - {{ e }}={{ acme_env[e] }}
{% endfor %}
    networks:
      - {{ network_name }}
    ports:
      - 80:80
      - 443:443
    expose:
      - 8080
{% if traefik_enable_metrics %}
      - {{ traefik_metrics_port }}
{% endif %}
    volumes:
      - {{ acme_volume }}:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`{{ traefik_name }}.{{ domain }}`)
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.tls.certresolver={{ acme_provider }}
      - flame.type=application
      - flame.name={{ traefik_name }}
      - flame.url={{ traefik_name }}.{{ domain }}
      - flame.icon=traffic-light
      - com.centurylinklabs.watchtower.enable={{ traefik_autoupdate | ternary('true', 'false')}}
    restart: {{ restart_policy }}

  # Portainer - GUI to control docker stuff
  {{ portainer_name }}:
    container_name: {{ portainer_name }}
    hostname: {{ portainer_name }}
    image: {{ portainer_image }}:{{ portainer_version }}
    restart: {{ restart_policy }}
    environment:
      - PUID={{ ansible_facts.user_uid }}
      - PGID={{ ansible_facts.user_gid }}
      - TZ={{ timezone }}
    networks:
      - {{ network_name }}
    expose:
      - 9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - {{ portainer_volume }}:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.{{ portainer_name }}.rule=Host(`{{ portainer_name }}.{{ domain }}`)
      - traefik.http.routers.{{ portainer_name }}.entrypoints=websecure
      - traefik.http.services.{{ portainer_name }}.loadbalancer.server.port=9000
      - traefik.http.routers.{{ portainer_name }}.service={{ portainer_name }}
      - traefik.http.routers.{{ portainer_name }}.tls.certresolver={{ acme_provider }}
      - flame.type=application
      - flame.name={{ portainer_name }}
      - flame.url={{ portainer_name }}.{{ domain }}
      - flame.icon=docker
      - com.centurylinklabs.watchtower.enable={{ portainer_autoupdate | ternary('true', 'false')}}

  # Flame Application Dashboard
  {{ flame_name }}:
    container_name: {{ flame_name }}
    hostname: {{ flame_name }}
    image: {{ flame_image }}:{{ flame_version }}
    restart: {{ restart_policy }}
    environment:
      - PUID={{ ansible_facts.user_uid }}
      - PGID={{ ansible_facts.user_gid }}
      - TZ={{ timezone }}
      - PASSWORD={{ flame_password }}
    volumes:    
      - {{ flame_volume }}:/app/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - {{ network_name }}
    expose:
      - 5005
    labels:
      - traefik.enable=true
      - traefik.http.routers.{{ flame_name }}.rule=Host(`{{ domain }}`)
      - traefik.http.routers.{{ flame_name }}.entrypoints=websecure
      - traefik.http.services.{{ flame_name }}.loadbalancer.server.port=5005
      - traefik.http.routers.{{ flame_name }}.service={{ flame_name }}
      - traefik.http.routers.{{ flame_name }}.tls.certresolver={{ acme_provider }}
      - com.centurylinklabs.watchtower.enable={{ flame_autoupdate | ternary('true', 'false')}}

  # Prometheus for gathering metrics
  {{ prom_name }}:
    container_name: {{ prom_name }}
    hostname: {{ prom_name }}
    image: {{ prom_image }}:{{ prom_version }}
    restart: {{ restart_policy }}
    environment:
      - PUID={{ ansible_facts.user_uid }}
      - PGID={{ ansible_facts.user_gid }}
      - TZ={{ timezone }}
    networks:
      - {{ network_name }}
    expose:
      - 9090
    volumes:
      - {{ config_dir }}/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - {{ prom_volume }}:/prometheus
    labels:
      - traefik.enable=true
      - traefik.http.routers.{{ prom_name }}.rule=Host(`{{ prom_name }}.{{ domain }}`)
      - traefik.http.routers.{{ prom_name }}.entrypoints=websecure
      - traefik.http.services.{{ prom_name }}.loadbalancer.server.port=9090
      - traefik.http.routers.{{ prom_name }}.service={{ prom_name }}
      - traefik.http.routers.{{ prom_name }}.tls.certresolver={{ acme_provider }}
      - flame.type=application
      - flame.name={{ prom_name }}
      - flame.url={{ prom_name }}.{{ domain }}
      - flame.icon=fire
      - com.centurylinklabs.watchtower.enable={{ prom_autoupdate | ternary('true', 'false')}}

  {{ prom_node_exp_name }}:
    container_name: {{ prom_node_exp_name }}
    hostname: {{ prom_node_exp_name }}
    image: {{ prom_node_exp_image }}:{{ prom_node_exp_version }}
    command:
      - '--path.rootfs=/host'
    network_mode: host
    pid: host
    volumes:
      - '/:/host:ro,rslave'
    restart: {{ restart_policy }}
    labels:
      - com.centurylinklabs.watchtower.enable={{ prom_node_exp_autoupdate | ternary('true', 'false')}}

  {{ grafana_name }}:
    container_name: {{ grafana_name }}
    hostname: {{ grafana_name }}
    image: {{ grafana_image }}:{{ grafana_version }}
    restart: {{ restart_policy }}
    environment:
      - PUID={{ ansible_facts.user_uid }}
      - PGID={{ ansible_facts.user_gid }}
      - TZ={{ timezone }}
      - GF_SECURITY_ADMIN_PASSWORD={{ grafana_admin_password }}
      - GF_INSTALL_PLUGINS={{ grafana_plugins }}
    networks:
      - {{ network_name }}
    expose:
      - 3000
    volumes:
      - {{ grafana_volume }}:/var/lib/grafana
    labels:
      - traefik.enable=true
      - traefik.http.routers.{{ grafana_name }}.rule=Host(`{{ grafana_name }}.{{ domain }}`)
      - traefik.http.routers.{{ grafana_name }}.entrypoints=websecure
      - traefik.http.services.{{ grafana_name }}.loadbalancer.server.port=3000
      - traefik.http.routers.{{ grafana_name }}.service={{ grafana_name }}
      - traefik.http.routers.{{ grafana_name }}.tls.certresolver={{ acme_provider }}
      - flame.type=application
      - flame.name={{ grafana_name }}
      - flame.url={{ grafana_name }}.{{ domain }}
      - flame.icon=gauge
      - com.centurylinklabs.watchtower.enable={{ grafana_autoupdate | ternary('true', 'false')}}

{% if ste_enable %}
  {{ ste_name }}:
    container_name: {{ ste_name }}
    hostname: {{ ste_name }}
    image: {{ ste_image }}:{{ ste_version }}
    restart: {{ restart_policy }}
    environment:
      - SPEEDTEST_PORT={{ ste_port }}
    networks:
      - {{ network_name }}
    expose:
      - {{ ste_port }}
    labels:
      - com.centurylinklabs.watchtower.enable={{ ste_autoupdate | ternary('true', 'false')}}
    
{% endif %}
{% if wt_enable %}
  {{ wt_name }}:
    container_name: {{ wt_name }}
    hostname: {{ wt_name }}
    image: {{ wt_image }}:{{ wt_version }}
    restart: {{ restart_policy }}
    command:
      - "--schedule={{ wt_cron_schedule }}"
{% if wt_monitor_only %}
      - "--monitor-only"
{% endif %}
{% if wt_update_label_only %}
      - "--label-enable"
{% endif %}
{% if wt_discord_skip_startup_message %}
      - "--no-startup-message"
{% endif %}
{% if wt_discord_enable %}
      - "--notifications=slack"
      - "--notification-slack-hook-url={{ wt_discord_hook_url }}"
      - "--notification-slack-identifier={{ wt_discord_indentifier }}"
{% endif %}
    environment:
      - TZ={{ timezone }}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - {{ network_name }}
    labels:
      - com.centurylinklabs.watchtower.enable={{ wt_autoupdate | ternary('true', 'false')}}
    
{% endif %}
networks:
  {{ network_name }}:
    external: true

volumes:
  {{ acme_volume }}:
    external: true
  {{ portainer_volume }}:
    external: true
  {{ flame_volume }}:
    external: true
  {{ prom_volume }}:
    external: true
  {{ grafana_volume }}:
    external: true
